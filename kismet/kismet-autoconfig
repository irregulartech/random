#!/bin/sh
set -e
set -u

VERS='v1.9.9'

blue_hydra="false"
gentle="false"
gpsd_optional="false"
log_location=""
rtl_skip_zero="false"
trigger_lar="true"
truncate_data="false"
ubertooth_enable="false"
wifi_backhaul=""

if [ ! -x "$(command -v airmon-ng 2>&1)" ]; then
  printf 'airmon-ng is required, please install it\n' >&2
  printf 'this tool is typically available in the "aircrack-ng" package\n' >&2
  exit 1
fi
if [ ! -x "$(command -v ss 2>&1)" ]; then
  printf 'ss is required, please install it\n' >&2
  printf 'this tool is typically available in the "ss" package\n' >&2
  exit 1
fi
if [ ! -x "$(command -v jq 2>&1)" ]; then
  printf 'jq is required, please install it\n' >&2
  printf 'this tool is typically available in the "jq" package\n' >&2
  exit 1
fi
# On busybox/ash this returns "pgrep" because it's a built-in
# so for this check we rely on command -v exit code and don't test -x
if ! command -v pgrep > /dev/null 2>&1; then
  printf 'pgrep is required, please install it\n' >&2
  printf 'this tool is typically available in the "procps" package\n' >&2
  exit 1
fi
# XXX: This check finds both the built-in for busybox or the actual tool.  The built-in is missing features we use.
# XXX: Enhance this check to find the actual tool and ignore the busybox version.  ash
# XXX This horribly breaks in busybox libusb, -d 'vendor:' does not do anything
if [ -d /sys/bus/usb ]; then
  if ! command -v lsusb 2>&1; then
    printf "Please install lsusb from your distro's package manager.\n"
    exit 1
  else
    LSUSB=1
  fi
else
  LSUSB=0
fi

usb_check() {
  if [ "${LSUSB}" = "0" ]; then
    printf "This system does not appear to support usb devices but you asked for detection of a usb device.\n" >&2
    printf "Unable to comply, /sys/bus/usb or lsusb are missing\n" >&2
    return 1
  else
    return 0
  fi
}

# On busybox/ash this returns "lsmod" because it's a built-in
# so for this check we rely on command -v exit code and don't test -x
if ! command -v lsmod > /dev/null 2>&1; then
  printf 'lsmod is required, please install it\n' >&2
  printf 'this tool is typically available in the "kmod" package\n' >&2
  exit 1
fi
# maybe add support for ncat from nmap?
# On busybox/ash this returns "lsmod" because it's a built-in
# so for this check we rely on command -v exit code and don't test -x
if ! command -v nc > /dev/null 2>&1; then
  printf 'Some kind of netcat is required as "nc", please install it\n' >&2
  printf 'this tool is typically available in the "netcat" package\n' >&2
  exit 1
else
  # this doesn't support gnu netcat which needs -c?
  if nc -h 2>&1 | grep -q -- '-N'; then
    nc_flags="-N"
  elif nc -h 2>&1 | grep -q -- '-q'; then
    nc_flags="-q1"
  else
    nc_flags=""
  fi
fi

#argparser
while [ -n "${1:-}" ]; do
  case ${1} in
    --bluehydra)
      blue_hydra="true"
      shift
      ;;
    --detect)
      shift
      if [ -z "${1:-}" ]; then
        printf -- '--detect requires a routine to run as the next param\n'
        exit 1
      fi
      detect="${1}"
      shift
      ;;
    --enable-ubertooth)
      ubertooth_enable="true"
      shift
      ;;
    --gentle)
      gentle="true"
      shift
      ;;
    --gpsd-optional)
      gpsd_optional="true"
      shift
      ;;
    --log-location)
      shift
      if [ -z "${1:-}" ]; then
        printf -- '--log-location requires a path as the next param\n'
        exit 1
      fi
      log_location="${1}"
      shift
      ;;
    --rtl-skip-zero)
      rtl_skip_zero="true"
      shift
      ;;
    --skip-lar)
      trigger_lar="false"
      shift
      ;;
    --truncate-data)
      truncate_data="true"
      shift
      ;;
    --wifi-backhaul)
      shift
      if [ -z "${1:-}" ]; then
        printf -- '--wifi-backhaul requires an interface name as the next param\n'
        exit 1
      fi
      wifi_backhaul="${1}"
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      break
      ;;
  esac
done

# Validate detect option
if [ -n "${detect:-}" ]; then
  case ${detect} in
    gps) true ;;
    linuxbluetooth) true ;;
    linuxwifi) true ;;
    nordic) true ;;
    nxp) true ;;
    reg) true ;;
    rtl) true ;;
    ti) true ;;
    ubertooth) true ;;
    *)
      printf 'invalid option --detect %s\n' "${detect}"
      printf 'Available detections: gps linuxbluetooth linuxwifi nordic nxp reg rtl ti ubertooth\n'
      exit 1
      ;;
  esac
fi

if [ -n "${1:-}" ]; then
  if ! touch "${1}" || [ ! -w "${1}" ]; then
    printf 'Unable to write to config %s\n' "${1}" >&2
    exit 1
  else
    if [ "$(awk -F. '{print $1}' /proc/uptime)" -lt 60 ]; then
      sleepy_tyme=$(( 60 - $(awk -F. '{print $1}' /proc/uptime) ))
      printf 'Sleeping for %s seconds before writing config...\n' "${sleepy_tyme}" >&2
      sleep "${sleepy_tyme}"
    fi
  fi
fi

if [ -n "${log_location:-}" ]; then
  if [ ! -d "${log_location}" ]; then
    printf 'WARN: Requested log location %s does not exist, creating...\n' "${log_location}"
    mkdir -p "${log_location}"
  fi
  if [ ! -w "${log_location}" ]; then
    printf 'FATAL: Unable to write to requested log location: %s\n' "${log_location}" >&2
    exit 1
  fi
fi

vid_pid_to_dev(){
  if [ -z "${1:-}" ] || [ -z "${2:-}" ]; then
    printf 'vid_pid_to_dev requires vid as param one and pid as param two\n'
    exit 1
  fi
  # we want this to be split
  # shellcheck disable=2046
  find $(grep -l "PRODUCT=$(printf '%x/%x' "0x${1}" "0x${2}")" /sys/bus/usb/devices/[0-9]*:*/uevent | sed 's,uevent$,,') \
    /dev/null -name dev -o -name dev_id |
    sed 's,[^/]*$,uevent,' |
    xargs sed -n -e s,DEVNAME=,/dev/,p
}

cdc_acm_check() {
  if lsmod | grep -q 'cdc_acm' > /dev/null 2>&1; then
    true
  else
    printf 'Kernel module cdc_acm is required but not loaded. Do you need to install it?\n'
  fi
}

kismet_site=${1:-/dev/stdout}
printf '## kismet-autoconfig %s writing to %s\n' "${VERS}" "${kismet_site}" >&2

printf '## WARNING: This file is generated by kismet-autoconfig and cannot be edited!!!\n' > "${kismet_site}"

detect_nxp() {
  usb_check || return 0
  nxp_usb="$(lsusb -d '15a2:0300' | wc -l)"
  if [ "${nxp_usb}" = "0" ]; then
    return 0
  fi

  nxp_serial="0"
  nxpkw1z_first="1"
  all_nxp_accounted="0"

  for nxp in $(vid_pid_to_dev 15a2 0300) ; do
    if [ "${nxpkw1z_first}" = "1" ]; then
      printf '\n## NXP_KW1Z ble and zigbee sniffer\n' >> "${kismet_site}"
      nxpkw1z_first="0"
    fi
    printf 'source=nxp_kw41z:device=%s,type=nxp_kw41z,phy=all\n' "${nxp}" >> "${kismet_site}"
    : $(( nxp_serial += 1 ))
  done
  if [ "${nxp_usb}" != "${nxp_serial}" ]; then
    printf 'Detected %s nxp_kw1z but found serial interfaces for %s.\n' "${nxp_usb}" "${nxp_serial}" >&2
    all_nxp_accounted="1"
    if [ "${nxp_serial}" = 0 ]; then
      cdc_acm_check
    fi
  fi
  return "${all_nxp_accounted}"
}

detect_nordic() {
  usb_check || return 0
  all_nrf_accounted="0"
  mousejack_first="1"
  nrf154a_usb="0"
  nrf522a_usb="0"
  nrf154a_serial="0"
  nrf522a_serial="0"

  IFS='
'
  for device in $(lsusb -d '1915:' | tr ":" " "| awk '{print $6":"$7,$2"-"$4}' | sort) $(lsusb -d '239a:' | tr ":" " "| awk '{print $6":"$7,$2"-"$4}' | sort); do
    VID="$(printf '%s' "${device}" | awk '{print $1}' | awk -F: '{print $1}')"
    PID="$(printf '%s' "${device}" | awk '{print $1}' | awk -F: '{print $2}')"
    BUS="$(printf '%s' "${device}" | awk '{print $2}')"
    case "${PID}" in
      0102)
        # Nordic Semiconductor ASA Research Firmware
        if [ "${mousejack_first}" = "1" ]; then
          printf '\n## mousejack\n' >> "${kismet_site}"
          mousejack_first="0"
        fi
        printf 'source=mousejack-%s:hop_rate=82/sec,type=nrfmousejack\n' "${BUS}" >> "${kismet_site}"
        ;;
      154a)
        # nrf52840 802.15.4 sniffer
        # needs to be found by /dev/nrf52840*
        : $(( nrf154a_usb += 1 ))
        ;;
      522a)
        # nrf51822 ble sniffer
        # needs to be found by /dev/nrf51822*
        : $(( nrf522a_usb += 1 ))
        ;;
      7777)
        printf 'Detected stock Crazyradio PA dongle, did you forget to flash the rfstorm firmware?\n' >&2
        printf 'Information available here: https://github.com/BastilleResearch/nrf-research-firmware\n' >&2
        all_nrf_accounted="1"
        ;;
      *)
        printf 'Detected unsupported nrf device %s:%s, did you forget to flash the correct firmware?\n' "${VID}" "${PID}" >&2
        all_nrf_accounted="1"
        ;;
    esac
  done
  unset IFS

  if [ "${nrf154a_usb}" = "0" ] && [ "${nrf522a_usb}" = "0" ]; then
    # no devices requiring serial detection found, shortcut out
    return "${all_nrf_accounted}"
  fi

  nrf51822_first="1"
  for nrf51822 in $(vid_pid_to_dev 1915 522a); do
    if [ "${nrf51822_first}" = "1" ]; then
      printf '\n## nrf51822 ble sniffer\n' >> "${kismet_site}"
      nrf51822_first="0"
    fi
    printf 'source=nrf51822:device=%s,type=nrf51822\n' "${nrf51822}" >> "${kismet_site}"
    nrf522a_serial=$(( nrf522a_serial + 1 ))
  done
  if [ "${nrf522a_usb}" != "${nrf522a_serial}" ]; then
    printf 'Detected %s nrf51822 but found serial interfaces for %s.\n' "${nrf522a_usb}" "${nrf522a_serial}"
    all_nrf_accounted="1"
    if [ "${nrf522a_serial}" = 0 ]; then
      cdc_acm_check
    fi
  fi

  nrf52840_first="1"
  for nrf52840 in $(vid_pid_to_dev 1915 154a); do
    if [ "${nrf52840_first}" = 1 ]; then
      printf '\n## nrf52840 802.15.4 sniffer\n' >> "${kismet_site}"
      nrf52840_first="0"
    fi
    printf 'source=nrf52840:device=%s,type=nrf52840\n' "${nrf52840}" >> "${kismet_site}"
    nrf154a_serial=$(( nrf154a_serial + 1 ))
  done
  if [ "${nrf154a_usb}" != "${nrf154a_serial}" ]; then
    printf 'Detected %s nrf52840 but found serial interfaces for %s.\n' "${nrf154a_usb}" "${nrf154a_serial}"
    all_nrf_accounted="1"
    if [ "${nrf154a_serial}" = 0 ]; then
      cdc_acm_check
    fi
  fi

  return "${all_nrf_accounted}"
}

detect_linuxbluetooth() {
  if [ -x "$(command -v hciconfig)" ]; then
    bthci="$(hciconfig -a | awk -F: '/hci/{print $1}')"
    if [ -n "${bthci}" ]; then
      printf '\n## bluetooth classic *active* discovery\n' >> "${kismet_site}"
      for hci in ${bthci}; do
        if [ "${hci}" = "hci0" ] && [ "${blue_hydra}" = "true" ]; then
          continue
        fi
        printf 'source=%s:type=linuxbluetooth\n' "${hci}" >> "${kismet_site}"
      done
    fi
  else
    printf 'Bluetooth detection unavailable, hciconfig not installed.\n' >&2
    printf 'Typically this package is available as "bluez"\n' >&2
    printf '\n## Bluetooth detection unavailable, hciconfig not installed.\n' > "${kismet_site}"
    return 1
  fi
  return 0
}

detect_ubertooth() {
  usb_check || return 0
  if [ -z "$(lsusb -d '1d50:6002' 2>&1)" ]; then
    # No ubertooth found, bail out quick
    return 0
  fi
  if [ ! -x "$(command -v ubertooth-util)" ]; then
    printf 'Ubertooth device found using lsusb, but ubertooth tools are not installed\n' >&2
    printf 'Typically this package is available as "ubertooth".\n' >&2
    printf '# Ubertooth found, but ubertooth tools are not installed and are required.\n' > "${kismet_site}"
    if [ "${ubertooth_enable}" = "true" ]; then
      return 1
    else
      return 0
    fi
  fi
  uberteeth="$(ubertooth-util -N 2>/dev/null)"
  if [ "${uberteeth}" -gt "0" ]; then
    ubertooth_errors="0"
    printf '\n## ble passive discovery using ubertooth\n' >> "${kismet_site}"
    for i in $(seq 1 "${uberteeth}"); do
      ubertooth_device=$((i-1))
      if [ "${ubertooth_device}" = "1" ] && [ "${blue_hydra}" = "true" ]; then
        printf 'Ubertooth %s detected but left for blue_hydra\n' "${ubertooth_device}" >&2
        printf '# Leaving ubertooth %s for blue_hydra\n' "${ubertooth_device}" >> "${kismet_site}"
        printf '# source=ubertooth-%s:type=ubertooth\n' "${ubertooth_device}" >> "${kismet_site}"
        continue
      fi
      if [ "${gentle}" = "true" ]; then
        if [ "${ubertooth_enable}" = "true" ]; then
          printf 'source=ubertooth-%s:type=ubertooth\n' "${ubertooth_device}" >> "${kismet_site}"
        else
          printf '# ubertooth sources can be unstable, enable with --enable-ubertooth\n' >> "${kismet_site}"
          printf '# source=ubertooth-%s:type=ubertooth\n' "${ubertooth_device}" >> "${kismet_site}"
        fi
        continue
      fi
      if ubertooth_rx_stderr="$(ubertooth-rx -z -t 1 -U "${ubertooth_device}" 2>&1 > /dev/null)"; then
        if [ "${ubertooth_enable}" = "true" ]; then
          printf 'source=ubertooth-%s:type=ubertooth\n' "${ubertooth_device}" >> "${kismet_site}"
        else
          printf '# ubertooth sources can be unstable, enable with --enable-ubertooth\n' >> "${kismet_site}"
          printf '# source=ubertooth-%s:type=ubertooth\n' "${ubertooth_device}" >> "${kismet_site}"
        fi
        continue
      fi
      if [ -z "${ubertooth_rx_stderr:-}" ]; then
        printf 'Ubertooth test command "ubertooth-rx -z -t 1 -U %s" failed, without output.\n' "${i}" >&2
        printf 'You are on your own to figure out why.\n' >&2
        printf '# ubertooth-%s skipped due to unknown failure\n' "${ubertooth_device}" >> "${kismet_site}"
        ubertooth_errors="1"
        continue
      fi
      # If we got this far, we have an error, try to output something useful about it
      if printf '%s' "${ubertooth_rx_stderr}" | grep -q 'usb_claim_interface error -6'; then
        printf 'Ubertooth %s detected but it appears to already be in use.\n' "${ubertooth_device}" >&2
        if [ "${ubertooth_device}" = "1" ] && [ "${blue_hydra}" = "false" ]; then
          printf 'Did you mean to pass --bluehydra?' >&2
          printf '# ubertooth-%s in use, did you mean to pass --bluehydra?\n' "${ubertooth_device}" >> "${kismet_site}"
        fi
        printf '# ubertooth-%s skipped because it is already in use\n' "${ubertooth_device}" >> "${kismet_site}"
        printf '# source=ubertooth-%s:type=ubertooth\n' "${ubertooth_device}" >> "${kismet_site}"
        ubertooth_errors="1"
      elif printf '%s' "${ubertooth_rx_stderr}" | grep -q 'Access denied'; then
        printf 'Ubertooth detected but user %s does not have access to ubertooth %s hardware\n' "$(id -un)" "${ubertooth_device}" >&2
        printf '# ubertooth-%s skipped due to permission error\n' "${ubertooth_device}" >> "${kismet_site}"
        printf '# source=ubertooth-%s:type=ubertooth\n' "${ubertooth_device}" >> "${kismet_site}"
        ubertooth_errors="1"
      elif printf '%s' "${ubertooth_rx_stderr}" | grep -q 'Please upgrade to latest released firmware'; then
        printf 'Ubertooth %s detected but requires a firmware upgrade to work.\n' "${ubertooth_device}" >&2
        if [ -x "$(command -v ubertooth-dfu)" ]; then
          if [ -r '/usr/share/ubertooth/firmware/bluetooth_rxtx.dfu' ]; then
            printf 'You can upgrade it with "ubertooth-dfu -d /usr/share/ubertooth/firmware/bluetooth_rxtx.dfu -r"\n' >&2
          elif [ -r '/usr/share/ubertooth/bluetooth_rxtx.dfu' ]; then
            printf 'You can upgrade it with "ubertooth-dfu -d /usr/share/ubertooth/bluetooth_rxtx.dfu -r"\n' >&2
          fi
        fi
        printf '# ubertooth-%s skipped due to required firmware upgrade\n' "${ubertooth_device}" >> "${kismet_site}"
        printf '# source=ubertooth-%s:type=ubertooth\n' "${ubertooth_device}" >> "${kismet_site}"
        ubertooth_errors="1"
      else
        printf 'Ubertooth %s detected but provided an unknown error:\n' "${ubertooth_device}" >&2
        printf '%s\n' "${ubertooth_rx_stderr}" >&2
        printf '# ubertooth-%s skipped due to unknown error\n' "${ubertooth_device}" >> "${kismet_site}"
        printf '# source=ubertooth-%s:type=ubertooth\n' "${ubertooth_device}" >> "${kismet_site}"
        ubertooth_errors="1"
      fi
    done
    if [ "${ubertooth_enable}" = "true" ]; then
      return "${ubertooth_errors}"
    else
      return 0
    fi
  fi
  return 0
}

detect_ti() {
  usb_check || return 0
  ti16ae_first="1"
  ti16b3_first="1"
  IFS='
'
  for device in $(lsusb -d '0451:' | tr ":" " "| awk '{print $6":"$7,$2"-"$4}' | sort); do
    PID="$(printf '%s' "${device}" | awk '{print $1}' | awk -F: '{print $2}')"
    BUS="$(printf '%s' "${device}" | awk '{print $2}')"
    case "${PID}" in
      16ae)
        #Texas Instruments, Inc. CC2531 Dongle
        if [ "${ti16ae_first}" = "1" ]; then
          printf '\n## ticc2531 zigbee\n' >> "${kismet_site}"
          ti16ae_first=0
        fi
        printf 'source=ticc2531-%s:type=ticc2531\n' "${BUS}" >> "${kismet_site}"
        ;;
      16b3)
        #Texas Instruments, Inc. CC2540 USB Dongle
        if [ "${ti16b3_first}" = "1" ]; then
          printf '\n## ticc2540 ble\n' >> "${kismet_site}"
          ti16b3_first="0"
        fi
        printf 'source=ticc2540-%s:type=ticc2540\n' "${BUS}" >> "${kismet_site}"
        ;;
    esac
  done
  unset IFS
  return 0
}

detect_rtl() {
  usb_check || return 0
  #make sure we kill any left over rtl_433
  if pkill rtl_433 > /dev/null 2>&1; then
    sleep 1
    if pkill -9 rtl_433 > /dev/null 2>&1; then
      sleep 1
    fi
  fi
  rtl_num_devices=$(rtl_eeprom 2>&1 >/dev/null | grep "Found [0-9][0-9]*" | sed -E 's/.*([0-9]+).*/\1/')
  if [ -n "${rtl_num_devices}" ]; then
    printf "\n## RTL-SDR type sources\n" >> "${kismet_site}"
    for i in $(seq 1 "${rtl_num_devices}"); do
      rtl_device=$((i-1))
      if [ "${rtl_skip_zero}" = "true" ]; then
        case ${rtl_device} in
          0) printf 'Skipping rtlsdr-0 by request\n' >&2
            printf '# rtlsdr-%s detected but skipped by request\n' "${rtl_device}" >> "${kismet_site}"
            printf '# source=rtl433-%s:type=rtl433\n' "${rtl_device}" >> "${kismet_site}"
            continue
            ;;
          1) freq="433.92" ;;
          2) freq="315" ;;
          3) freq="915" ;;
          4) freq="345" ;;
          5) freq="868.3" ;;
          6) freq="adsb" ;;
          7) freq="amr" ;;
          *) freq="none" ;;
        esac
      else
        case ${rtl_device} in
          0) freq="433.92" ;;
          1) freq="315" ;;
          2) freq="915" ;;
          3) freq="345" ;;
          4) freq="868.3" ;;
          5) freq="adsb" ;;
          6) freq="amr" ;;
          *) freq="none" ;;
        esac
      fi
      printf '# rtl-sdr %s\n' "${rtl_device}" >> "${kismet_site}"
      if [ "${freq}" = "none" ]; then
        printf 'You have more rtlsdrs than we know what to do with.\n' >&2
        printf '# Wasting rtlsdr-%s\n' "${rtl_device}" >> "${kismet_site}"
      elif [ "${freq}" = "adsb" ]; then
        printf 'source=rtladsb-%s:name=rtladsb,type=rtladsb\n' "${rtl_device}" >> "${kismet_site}"
      elif [ "${freq}" = "amr" ]; then
        printf 'source=rtlamr-%s:name=rtlamr,type=rtlamr\n' "${rtl_device}" >> "${kismet_site}"
      else
        printf 'source=rtl433-%s:channel=%sMHz,name=rtl%s,type=rtl433\n' "${rtl_device}" "${freq}" "${freq}" >> "${kismet_site}"
      fi
    done
  fi
  return 0
}

handle_lar() {
  if [ "${trigger_lar}" != "true" ]; then
    return 0
  fi
  if [ -z "${1:-}" ]; then
    printf 'Calling handle_lar without a wifi interface is not allowed.\n' >&2
    exit 1
  fi
  # This isn't as robust as airmon-ng but I don't think I care since it works for iwlwifi
  if [ -r "/sys/class/net/${1}/phy80211/name" ]; then
    PHYDEV="$(cat "/sys/class/net/${1}/phy80211/name")"
    if [ -n "${PHYDEV:-}" ]; then
      # If channel 5955 isn't enabled then we know we need to scan
      # Channel 5955 was chosen because most countries allow 5945 and higher
      # https://git.kernel.org/pub/scm/linux/kernel/git/wens/wireless-regdb.git/tree/db.txt
      if iw phy "${PHYDEV}" channels | grep -q '5955 MHz .* (disabled)' > /dev/null 2>&1 ; then
        unset vif_name
        for vif in /sys/class/ieee80211/"${PHYDEV}"/device/net/*; do
          # Checking for managed/client mode
          if [ "$(cat "${vif}/type")" = "1" ]; then
            vif_name="${vif##*/}"
            break
          fi
        done
        if [ -z "${vif_name:-}" ]; then
          printf 'Your iwlwifi device %s needs LAR set, but no managed interface is available to do that.\n' "${1}" >&2
          printf 'Please run "airmon-ng stop %s" or create a managed interface manually.\n' "${1}" >&2
          exit 1
        fi
        was_down="0"
        if ! ip link show "${vif_name}" | grep -q 'UP' > /dev/null 2>&1 ; then
          ip link set "${vif_name}" up >&2
          was_down="1"
        fi
        iw "${vif_name}" scan > /dev/null 2>&1
        printf 'LAR set for %s\n' "${vif_name}" >&2
        sleep 1
        if [ "${was_down}" = "1" ]; then
          ip link set "${vif_name}" down >&2
        fi
      fi
    fi
  fi
  return 0
}

detect_reg() {
  if iw reg get | grep -q 'country 00:'; then
    printf '\nRegulatory Domain appears to be unset, please consider setting it with "iw reg set XX"\n' >&2
    printf 'https://wireless.wiki.kernel.org/en/users/documentation/iw#updating_your_regulatory_domain\n' >&2
    printf '\n## Wifi Regulatory Domain appears to be unset, please consider setting it with "iw reg set XX"\n' >> "${kismet_site}"
    # Should this return 1?
    return 0
  else
    for regdomain in $(iw reg get | awk '/country/ {print substr($2,1,length($2)-1)}' | sort -u); do
      printf '\nRegulatory Domain set to %s, see "iw reg get" for details\n' "${regdomain}" >&2
      printf '\n## Wifi Regulatory Domain set to %s\n' "${regdomain}" >> "${kismet_site}"
    done
    return 0
  fi
}

detect_linuxwifi() {
  # XXX: the coconut detection needs to remove things from the wlan detection, and it's a little dumb about it
  coconut_found='0'
  if [ "${LSUSB}" = "1" ] && [ "$(lsusb -d '148f:5370' | wc -l)" -gt 8 ]; then
    coconut_likely='1'
  else
    coconut_likely='0'
  fi
  if [ "${coconut_likely}" = '1' ]; then
    # Hak5 Coconut
    coconuts="$(kismet_cap_hak5_wifi_coconut --list 2>&1 | awk '/^ *coconut/ {print $1}')"
    if [ -n "${coconuts}" ]; then
      coconut_found="1"
      printf '\n## Hak5 Wifi Coconut\n' >> "${kismet_site}"
      for coconut in ${coconuts}; do
        printf 'source=%s:type=hak5wificoconut\n' "${coconut}" >> "${kismet_site}"
      done
    fi
  fi

  wlan_devices="$(airmon-ng 2>&1| grep --color=never -e 'phy' -e 'root' | awk '{print $2}')"
  if [ "${wlan_devices:-}" = "it" ]; then # "run it as root" | awk '{print $2}'
    printf '\nThe installed version of airmon-ng must be run as root.\n' >&2
    printf 'Please run this script as root so it can execute airmon-ng as root.\n' >&2
    exit 1
  elif [ -z "${wlan_devices:-}" ]; then
    return 0
  fi
  printf '\n## Wifi\n' >> "${kismet_site}"
  for wlan in ${wlan_devices}; do
    #check off phys and only do each one once, picking interfaces already in monitor mode if available
    #PHYDEV="$(cat "/sys/class/net/${wlan}/phy80211/name")"
    if [ -n "${wifi_backhaul:-}" ]; then
      printf 'Ignoring device %s because it is being used as wifi backhaul\n' "${wlan}" >&2
      printf '# Ignoring device %s because it is being used as wifi backhaul\n' "${wlan}" >> "${kismet_site}"
      continue
    fi
    # this interates over all the vif's passed, even if there are multiple vifs per phy
    # kismet handles it fine, but that's yucky
    if [ -r "/sys/class/net/${wlan}/device/uevent" ]; then
      DRIVER="$(awk -F'=' '$1 == "DRIVER" {print $2}' "/sys/class/net/${wlan}/device/uevent")"
      if [ -n "${DRIVER:-}" ]; then
        if [ "${DRIVER}" = "rt2800usb" ]; then
          if [ "${coconut_found}" = "1" ]; then
            printf 'Ignoring individual rt2800usb device %s because Hak5 Coconut present.\n' "${wlan}" >&2
            printf '# Ignoring individual rt2800usb device %s because Hak5 Coconut present.\n' "${wlan}" >> "${kismet_site}"
            continue
          fi
        elif [ "${DRIVER}" = "iwlwifi" ]; then
          handle_lar "${wlan}"
        fi
      fi
    fi
    if [ "${truncate_data}" = "false" ]; then
      printf 'source=%s:default_ht20=true,type=linuxwifi\n' "${wlan}" >> "${kismet_site}"
    else
      printf 'source=%s:default_ht20=true,truncate_data=true,type=linuxwifi\n' "${wlan}" >> "${kismet_site}"
    fi
  done
  return 0
}

detect_gps() {
  printf '\n## gps\n'
  if ss -nlt 2>&1 | grep -q '127.0.0.1:2947'; then
    gps_device="false"
    for gps in $(printf '?DEVICES;' | timeout 1 nc ${nc_flags:-} localhost 2947 2>&1 | jq -eM 'select (.class=="DEVICES") | ."devices"[]."path"'); do
      printf '# Found GPS device %s controlled by gpsd\n' "${gps}" >> "${kismet_site}"
      gps_device="true"
    done
    if [ "${gps_device}" = "true" ]; then
      gps_lock="0"
      for lock in $(printf '?WATCH={"json":true,"nmea":true};\n?POLL;' |  nc ${nc_flags:-} localhost 2947 2>&1 | jq -eM 'select (.class=="POLL").tpv[]."mode"'); do
        case "${lock}" in
          0) true ;;
          1) [ "${gps_lock}" -lt 1 ] && gps_lock="1";;
          2) [ "${gps_lock}" -lt 2 ] && gps_lock="2";;
          3) [ "${gps_lock}" -lt 3 ] && gps_lock="3";;
          *) printf 'Unknown gps lock state %\n' "${lock}" >&2
        esac
      done
      case "${gps_lock}" in
        0)
          printf 'GPS lock unknown, are you sure your gps works?\n' >&2
          ;;
        1)
          printf 'GPS has no lock.\n' >&2
          ;;
        2)
          printf 'Best gps lock is 2d.\n' >&2
          ;;
      esac
      if ! pgrep -fa "gpsd.* -n " > /dev/null 2>&1; then
        printf 'It may help to add "-n" to GPSD_OPTIONS so gpsd polls all the time.\n' >&2
      fi
      printf 'gps=gpsd:host=localhost,port=2947,reconnect=true\n' >> "${kismet_site}"
    else
      printf 'GPSD is running but no devices are configured, please configure gpsd to use your gps if you want location information.\n' >&2
      printf '# gpsd is running but no devices are configure, please configure gpsd to use your gps if you want location information.\n' >> "${kismet_site}"
      printf '# gps=gpsd:host=localhost,port=2947,reconnect=true\n' >> "${kismet_site}"
      if [ "${gpsd_optional}" = "false" ]; then
        return 1
      fi
    fi
  else
    printf 'GPSD is not running, please configure and start it if you want location information.\n' >&2
    printf '# gpsd is not running, please configure and start it if you want location information.\n' >> "${kismet_site}"
    printf '# gps=gpsd:host=localhost,port=2947,reconnect=true\n' >> "${kismet_site}"
    if [ "${gpsd_optional}" = "false" ]; then
      return 1
    fi
  fi
  return 0
}

add_log_details() {
  printf '\n## logging config\n' >> "${kismet_site}"
  printf 'log_title=%s\n' "$(hostname)" >> "${kismet_site}"

  if [ -n "${log_location:-}" ]; then
    printf '# log location\n' >> "${kismet_site}"
    printf 'log_prefix=%s\n' "${log_location}" >> "${kismet_site}"
  fi
  return 0
}

add_user_config() {
  if [ -r "/etc/kismet/kismet-autoconfig.conf" ]; then
    cat /etc/kismet/kismet-autoconfig.conf >> "${kismet_site}"
  elif [ -r "/usr/local/kismet/kismet-autoconfig.conf" ]; then
    cat /usr/local/kismet/kismet-autoconfig.conf >> "${kismet_site}"
  fi
  return 0
}

kick_it() {
  errors_found="0"
  detect_nxp || errors_found="1"
  detect_nordic || errors_found="1"
  detect_linuxbluetooth || errors_found="1"
  detect_ubertooth || errors_found="1"
  detect_ti || errors_found="1"
  detect_rtl || errors_found="1"
  detect_reg || errors_found="1"
  detect_linuxwifi || errors_found="1"
  detect_gps || errors_found="1"
  add_log_details || errors_found="1"
  add_user_config || errors_found="1"
  return "${errors_found}"
}

if [ -n "${detect:-}" ]; then
  # run just one detection
  if detect_"${detect}"; then
    exit 0
  else
    printf '%s found likely errors, please review the output carefully.\n' "${0}"
    exit 1
  fi
else
  # run them all
  if kick_it; then
    exit 0
  else
    printf '%s found likely errors, please review the output carefully.\n' "${0}"
    exit 1
  fi
fi

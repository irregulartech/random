#!/bin/sh
set -e
set -u

VERS="v0.9"

blue_hydra="false"
rtl_skip_zero="false"
trigger_lar="true"
log_location=""
truncate_data="false"

#argparser
while [ -n "${1}" ]; do
  case ${1} in 
    --blue_hydra)
      blue_hydra="true"
      shift
      ;;
    --log-location)
      shift
      log_location="${1}"
      shift
      ;;
    --rtl-skip-zero)
      rtl_skip_zero="true"
      shift
      ;;
    --skip-lar)
      trigger_lar="false"
      shift
      ;;
    --truncate-data)
      truncate_data="true"
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      break
      ;;
  esac
done

if [ -n "${1}" ]; then
  if ! touch "${1}" || [ ! -w "${1}" ]; then
    printf "Unable to write to config %s\n" "${1}" >&2
    exit 1
  else
    if [ "$(awk -F. '{print $1}' /proc/uptime)" -lt 60 ]; then
      sleepy_tyme=$(( 60 - $(awk -F. '{print $1}' /proc/uptime) ))
      printf "Sleeping for %s seconds before writing config...\n" "${sleepy_tyme}" >&2
      sleep "${sleepy_tyme}"
    fi
  fi
fi

if [ -n "${log_location:-}" ]; then
  if [ ! -d "${log_location}" ]; then
    printf "WARN: Requested log location %s does not exist, creating...\n" "${log_location}"
    mkdir -p "${log_location}"
  fi
  if [ ! -w "${log_location}" ]; then
    printf "FATAL: Unable to write to requested log location: %s\n" "${log_location}"
    exit 1
  fi
fi

kismet_site=${1:-/dev/stdout}
printf "kismet-autoconfig ${VERS} writing to %s\n" "${kismet_site}" >&2

printf "#WARNING: This file is generated by kismet-autoconfig and cannot be edited!!!\n\n" > "${kismet_site}"

for nxp in $(ls /dev/nxp_kw41z* 2> /dev/null); do
  printf "#NXP_KW1Z btle and zigbee sniffer\n" >> "${kismet_site}"
  printf "source=nxp_kw41z:device=%s,type=nxp_kw41z,phy=all\n" "${nxp}" >> "${kismet_site}"
done

#for nrf52840 in $(ls /dev/nxp_kw41z* 2> /dev/null); do
#  printf "#NXP_KW1Z btle and zigbee sniffer\n" >> "${kismet_site}"
#  printf "source=nxp_kw41z:device=%s,type=nxp_kw41z,phy=all\n" "${nxp}" >> "${kismet_site}"
#done

#for nrf51820 in $(ls /dev/nxp_kw41z* 2> /dev/null); do
#  printf "#NXP_KW1Z btle and zigbee sniffer\n" >> "${kismet_site}"
#  printf "source=nxp_kw41z:device=%s,type=nxp_kw41z,phy=all\n" "${nxp}" >> "${kismet_site}"
#done

bthci="$(hciconfig -a | awk -F: '/hci/{print $1}')"
if [ -n "${bthci}" ]; then
  printf "#bluetooth classic *active* discovery\n" >> "${kismet_site}"
  for hci in ${bthci}; do
    if [ "${hci}" = "hci0" ] && [ "${blue_hydra}" = "true" ]; then
      continue
    fi
    printf "source=%s:type=linuxbluetooth\n" "${hci}" >> "${kismet_site}"
  done
fi

#ubertooth
if [ -x "$(command -v ubertooth-util)" ]; then
  # Steal firmware validation from blue_hydra?
  uberteeth="$(ubertooth-util -N 2>/dev/null)"
  if [ "${uberteeth}" -gt "0" ]; then
    printf "#btle passive discovery\n" >> "${kismet_site}"
    for i in $(seq 1 "${uberteeth}"); do
      ubertooth_device=$((i-1))
      if [ "${ubertooth_device}" = "1" ] && [ "${blue_hydra}" = "true" ]; then
        continue
      fi
      printf "source=ubertooth-%s:type=ubertooth\n" "${ubertooth_device}" >> "${kismet_site}"
    done
  fi
else
  printf "Ubertooth detection unavailable, ubertooth-util.\n" >&2
fi

#Nordic Semiconductor ASA Research Firmware
mousejack="$(lsusb | grep '1915:0102' | awk '{print $2"-"$4}')"
if [ -n "${mousejack}" ]; then
  printf "#mousejack\n" >> "${kismet_site}"
  for dongle in ${mousejack}; do
    printf "source=mousejack-%shop_rate=82/sec,type=nrfmousejack\n" "${dongle}" >> "${kismet_site}"
  done
fi

#Texas Instruments, Inc. CC2531 Dongle
ticc2531="$(lsusb | grep '0451:16ae' | awk '{print $2"-"$4}')"
if [ -n "${ticc2531}" ]; then
  printf "#ticc2531 zigbee\n" >> "${kismet_site}"
  for dongle in ${ticc2531}; do
    printf "source=ticc2531-%stype=ticc2531\n" "${dongle}" >> "${kismet_site}"
  done
fi

#Texas Instruments, Inc. CC2540 USB Dongle
ticc2540="$(lsusb | grep '0451:16b3' | awk '{print $2"-"$4}')"
if [ -n "${ticc2540}" ]; then
  printf "#ticc2540 btle\n" >> "${kismet_site}"
  for dongle in ${ticc2540}; do
    printf "source=ticc2540-%stype=ticc2540\n" "${dongle}" >> "${kismet_site}"
  done
fi

#make sure we kill any left over rtl_433
if pkill rtl_433 > /dev/null 2>&1; then
  sleep 1
  if pkill -9 rtl_433 > /dev/null 2>&1; then
    sleep 1
  fi
fi
rtl_num_devices=$(rtl_eeprom 2>&1 >/dev/null | grep "Found [0-9][0-9]*" | sed -E 's/.*([0-9]+).*/\1/')
if [ -n "${rtl_num_devices}" ]; then
  for i in $(seq 1 "${rtl_num_devices}"); do
    rtl_device=$((i-1))
    if [ "${rtl_skip_zero}" = "true" ]; then
      case ${rtl_device} in
        0) printf "Skipping rtlsdr-0 by request\n" >&2
           printf "#source=rtl433-%s:type=rtl433\n" "${rtl_device}" >> "${kismet_site}"
           continue
           ;;
        1) freq="433.92" ;;
        2) freq="315" ;;
        3) freq="915" ;;
        4) freq="345" ;;
        5) freq="868.3" ;;
        6) freq="adsb" ;;
        7) freq="amr" ;;
        *)
          printf "You have more rtlsdrs than we know what to do with.\n" >&2
          printf "# Wasting rtlsdr-%s\n" "${rtl_device}" >> "${kismet_site}"
          continue
          ;;
      esac
    else
      case ${rtl_device} in
        0) freq="433.92" ;;
        1) freq="315" ;;
        2) freq="915" ;;
        3) freq="345" ;;
        4) freq="868.3" ;;
        5) freq="adsb" ;;
        6) freq="amr" ;;
        *)
          printf "You have more rtlsdrs than we know what to do with.\n" >&2
          printf "# Wasting rtlsdr-%s\n" "${rtl_device}" >> "${kismet_site}"
          continue
          ;;
      esac
    fi
    printf "#rtl-sdr %s\n" "${rtl_device}" >> "${kismet_site}"
    if [ "${freq}" = "adsb" ]; then
      printf "source=rtladsb-%s:name=rtladsb,type=rtladsb\n" "${rtl_device}" >> "${kismet_site}"
    elif [ "${freq}" = "amr" ]; then
      printf "source=rtlamr-%s:name=rtlamr,type=rtlamr\n" "${rtl_device}" >> "${kismet_site}"
    else
      printf "source=rtl433-%s:channel=%sMHz,name=rtl%s,type=rtl433\n" "${rtl_device}" "${freq}" "${freq}" >> "${kismet_site}"
    fi
  done
fi

wlan_devices="$(airmon-ng | grep --color=never phy | awk '{print $2}')"
if [ -n "${wlan_devices:-}" ]; then
  for wlan in ${wlan_devices}; do
    if [ "${trigger_lar}" = "true" ]; then
      if [ -r "/sys/class/net/${wlan}/device/uevent" ]; then
        DRIVER="$(awk -F'=' '$1 == "DRIVER" {print $2}' "/sys/class/net/${1}/device/uevent")"
        if [ -n "${DRIVER:-}" ] && [ "${DRIVER}" = "iwlwifi" ]; then
          #This isn't as robust as airmon-ng but I don't think I care since it works for iwlwifi
          if [ -r "/sys/class/net/${wlan}/phy80211/name" ]; then
            PHYDEV="$(cat "/sys/class/net/${wlan}/phy80211/name")"
            if [ -n "${PHYDEV:-}" ]; then
              if iw phy "${PHYDEV}" info | grep -q '7115 MHz .* (disabled)' > /dev/null 2>&1 ; then
                for vif in /sys/class/ieee80211/"${PHYDEV}"/device/net/*; do
                  # Checking for managed/client mode
                  if [ "$(cat "${vif}/type")" = "1" ]; then
                    was_down="0"
                    if ! ip link show "${vif}" | grep -q 'UP' > /dev/null 2>&1 ; then
                      ip link set "${vif}" up >&2
                      was_down="1"
                    fi
                    iw "${vif}" scan > /dev/null 2>&1
                    sleep 1
                    if [ "${was_down}" = "1" ]; then
                      ip list set "${vif}" down >&2
                    fi
                  fi
                done
              fi
            fi
          fi
        fi
      fi
    fi
    if [ "${truncate_data}" = "false" ]; then
      printf "source=%s:default_ht20=true,type=linuxwifi\n" "${wlan}" >> "${kismet_site}"
    else
      printf "source=%s:default_ht20=true,truncate_data=true,type=linuxwifi\n" "${wlan}" >> "${kismet_site}"
    fi
  done
fi

#should I detect if gpsd is installed/running?
printf "#gps\n" >> "${kismet_site}"
printf "gps=gpsd:host=localhost,port=2947,reconnect=true\n" >> "${kismet_site}"

printf "log_title=%s\n" "$(hostname)" >> "${kismet_site}"

if [ -n "${log_location:-}" ]; then
  printf "#log location\n" >> "${kismet_site}"
  printf "log_prefix=%s\n" "${log_location}" >> "${kismet_site}"
fi

if [ -r "/etc/kismet/kismet-autoconfig.conf" ]; then
  cat /etc/kismet/kismet-autoconfig.conf >> "${kismet_site}"
elif [ -r "/usr/local/kismet/kismet-autoconfig.conf" ]; then
  cat /usr/local/kismet/kismet-autoconfig.conf >> "${kismet_site}"
fi

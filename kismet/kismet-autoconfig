#!/bin/sh
VERS="v0.5"

blue_hydra="false"
rtl_skip_zero="false"

#argparser
while [ -n "${1}" ]; do
  case ${1} in 
    --blue_hydra)
      blue_hydra="true"
      shift
      ;;
    --rtl_skip_zero)
      rtl_skip_zero="true"
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      break
      ;;
  esac
done

if [ -n "${1}" ]; then
  if ! touch "${1}" || [ ! -w "${1}" ]; then
    printf "Unable to write to config %s\n" "${1}"
    exit 1
  else
    if [ "$(awk -F. '{print $1}' /proc/uptime)" -lt 60 ]; then
      sleepy_tyme=$(( 60 - $(awk -F. '{print $1}' /proc/uptime) ))
      printf "Sleeping for %s seconds before writing config...\n" "${sleepy_tyme}"
      sleep "${sleepy_tyme}"
    fi
  fi
fi

kismet_site=${1:-/dev/stdout}
printf "kismet-autoconfig ${VERS} writing to %s\n" "${kismet_site}"

printf "#WARNING: This file is generated by kismet-autoconfig and cannot be edited!!!\n\n" > "${kismet_site}"

for nxp in $(ls /dev/nxp_kw41z* 2> /dev/null); do
  printf "#NXP_KW1Z btle and zigbee sniffer\n" >> "${kismet_site}"
  printf "source=nxp_kw41z:device=%s,type=nxp_kw41z,phy=all\n" "${nxp}" >> "${kismet_site}"
done

bthci="$(hciconfig -a | awk -F: '/hci/{print $1}')"
if [ -n "${bthci}" ]; then
  printf "#bluetooth classic *active* discovery\n" >> "${kismet_site}"
  for hci in ${bthci}; do
    if [ "${hci}" = "hci0" ] && [ "${blue_hydra}" = "true" ]; then
      continue
    fi
    printf "source=%s:type=linuxbluetooth\n" "${hci}" >> "${kismet_site}"
  done
fi

#ubertooth
uberteeth="$(ubertooth-util -N 2>/dev/null)"
if [ "${uberteeth}" -gt "0" ]; then
  printf "#btle passive discovery\n" >> "${kismet_site}"
  for i in $(seq 1 "${uberteeth}"); do
    ubertooth_device=$((i-1))
    if [ "${ubertooth_device}" = "1" ] && [ "${blue_hydra}" = "true" ]; then
      continue
    fi
    printf "source=ubertooth-%s:type=ubertooth\n" "${ubertooth_device}" >> "${kismet_site}"
  done
fi

mousejack="$(lsusb | grep Nordic | awk '{print $2"-"$4}')"
if [ -n "${mousejack}" ]; then
  printf "#mousejack\n" >> "${kismet_site}"
  for dongle in ${mousejack}; do
    printf "source=mousejack-%shop_rate=82/sec,type=nrfmousejack\n" "${dongle}" >> "${kismet_site}"
  done
fi

ticc2531="$(lsusb | grep CC2531 | awk '{print $2"-"$4}')"
if [ -n "${ticc2531}" ]; then
  printf "#ticc2531 zigbee\n" >> "${kismet_site}"
  for dongle in ${ticc2531}; do
    printf "source=ticc2531-%stype=ticc2531\n" "${dongle}" >> "${kismet_site}"
  done
fi

ticc2540="$(lsusb | grep CC2540 | awk '{print $2"-"$4}')"
if [ -n "${ticc2540}" ]; then
  printf "#ticc2540 btle\n" >> "${kismet_site}"
  for dongle in ${ticc2540}; do
    printf "source=ticc2540-%stype=ticc2540\n" "${dongle}" >> "${kismet_site}"
  done
fi

#make sure we kill any left over rtl_433
killall rtl_433 > /dev/null 2>&1
sleep 1
killall -9 rtl_433 > /dev/null 2>&1
sleep 1
rtl_num_devices=$(rtl_eeprom 2>&1 >/dev/null | grep "Found [0-9][0-9]*" | sed -E 's/.*([0-9]+).*/\1/')
if [ -n "${rtl_num_devices}" ]; then
  for i in $(seq 1 "${rtl_num_devices}"); do
    rtl_device=$((i-1))
    if [ "${rtl_skip_zero}" = "true" ]; then
      case ${rtl_device} in
        0) freq="315" ;;
        1) freq="433.92" ;;
        2) freq="915" ;;
        3) freq="345" ;;
        4) freq="868.3" ;;
        5) freq="adsb" ;;
        6) freq="amr" ;;
        *)
          printf "You have more rtlsdrs than we know what to do with.\n"
          printf "# Wasting rtlsdr-%s\n" "${rtl_device}" >> "${kismet_site}"
          ;;
      esac
    else
      case ${rtl_device} in
        1) freq="315" ;;
        2) freq="433.92" ;;
        3) freq="915" ;;
        4) freq="345" ;;
        5) freq="868.3" ;;
        6) freq="adsb" ;;
        7) freq="amr" ;;
        *)
          printf "You have more rtlsdrs than we know what to do with.\n"
          printf "# Wasting rtlsdr-%s\n" "${rtl_device}" >> "${kismet_site}"
          ;;
      esac
    fi
    printf "#rtl-sdr %s\n" "${rtl_device}" >> "${kismet_site}"
    if [ "${freq}" = "adsb" ]; then
      printf "source=rtladsb-0:name=rtladsb,type=rtladsb\n" >> "${kismet_site}"
    elif [ "${freq}" = "amr" ]; then
      printf "source=rtlamr-0:name=rtlamr,type=rtlamr\n" >> "${kismet_site}"
    else
      printf "source=rtl433-%s:channel=%sMHz,name=rtl%s,type=rtl433\n" "${rtl_device}" "${freq}" "${freq}" >> "${kismet_site}"
    fi
  done
fi

for wlan in $(airmon-ng | grep --color=never phy | awk '{print $2}'); do
  printf "source=%s:default_ht20=true,type=linuxwifi\n" "${wlan}" >> "${kismet_site}"
done

printf "#gps\n" >> "${kismet_site}"
printf "gps=gpsd:host=localhost,port=2947,reconnect=true\n" >> "${kismet_site}"

# username/password
printf "httpd_username=kismet\n" >> "${kismet_site}"
printf "httpd_password=kismet\n" >> "${kismet_site}"

printf "#log stuff\n" >> "${kismet_site}"
mkdir -p /root/kismet
printf "log_prefix=/root/kismet\n" >> "${kismet_site}"
printf "log_title=%s\n" "$(hostname)" >> "${kismet_site}"
printf "hidedata=true\n" >> "${kismet_site}"
printf "kis_log_duplicate_packets=false\n" >> "${kismet_site}"
